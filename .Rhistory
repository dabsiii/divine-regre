`50startup` <- read.csv("C:/Users/AsusTUF/Desktop/divine-regre/50startup.csv")
View(`50startup`)
# Load Necessary Library
library(readr)
install.packages("readr")
# Load Necessary Library
library(readr)
# Load the Dataset
data <- read_csv("50startup.csv")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
# Load Necessary Library
library(readr)
# Reduced model using only the significant variable (RND)
reducedmodel <- lm(PROFIT ~ RND, data = data)
# Summarize reduced model to view the results
summary(reducedmodel)
# ASSUMPTIONS
# Linearity plot
plot(reducedmodel$fitted.values, residuals(reducedmodel),
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, col = "red")
# Independence of Residuals:  Durbin-Watson test
install.packages("lmtest")
# Independence of Residuals:  Durbin-Watson test
# install.packages("lmtest")
library(lmtest)
dwtest(reducedmodel)
#Test for Homoscedasticity
# Scale-location plot
plot(reducedmodel, which = 3)
# Test for Normality of Residuals
# Q-Q plot for normality
qqnorm(residuals(reducedmodel))
qqline(residuals(reducedmodel), col = "red")
# Shapiro-Wilk test
shapiro.test(residuals(reducedmodel))
# Load Necessary Library
# Note: run command: install.packages("readr") if not already satisfied
library(readr)
# Load the Dataset
data <- read_excell("50startup.xlsx")
# Load the Dataset
data <- read_excel("50startup.xlsx")
library(readxl)
# Load the Dataset
data <- read_excel("50startup.xlsx")
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
library(readxl)
X50startups <- read_excel("50startups.xlsx")
View(X50startups)
library(readxl)
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
library(readxl)
X50startups <- read_excel("50startups.xlsx")
View(X50startups)
library(readxl)
# Load the Dataset
data <- read_excel("50startup.xlsx")
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
library(readxl)
X50startups <- read_excel("50startups.xlsx")
View(X50startups)
library(readxl)
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
library(readxl)
X50startups <- read_excel("50startups.xlsx")
View(X50startups)
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
library(readxl)
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
library(readxl)
# Load the Dataset
data <- read_excel("50startups.xlsx")
library(readxl)
X50startups <- read_excel("50startups.xlsx")
View(X50startups)
library(readxl)
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
library(readxl)
X50startups <- read_excel("50startups.xlsx")
View(X50startups)
library(readxl)
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
library(readxl)
X50startups <- read_excel("50startups.xlsx")
View(X50startups)
library(readxl)
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
library(readxl)
X50startups <- read_excel("50startups.xlsx")
View(X50startups)
# Load Necessary Library
library(readxl)
# Load Necessary Library
library(readxl)
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Load the Dataset
data <- read_excel("50startups.xlsx")
# Build the full multiple linear regression model
fullmodel <- lm(PROFIT ~ RND + ADMIN + MKT, data=data)
# Summarize full model to view the results
summary(fullmodel)
# Reduced model using only the significant variable (RND)
reducedmodel <- lm(PROFIT ~ RND+MKT, data = data)
# Summarize reduced model to view the results
summary(reducedmodel)
# Reduced model using only the significant variables (RND & MKT)
reducedmodel <- lm(PROFIT ~ RND+MKT, data = data)
# Summarize reduced model to view the results
summary(reducedmodel)
abline(h = 0, col = "red")
# Plot residuals vs. fitted values to check linearity
plot(reducedmodel$fitted.values, residuals(reducedmodel),
main = "Residuals vs Fitted",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20, col = "blue")
abline(h = 0, col = "red")
# Check Independece of Residuals
# Durbin-Watson test for independence
library(lmtest)
dwtest(reducedmodel)
# Check Homoscedasticity
# Breusch-Pagan test for homoscedasticity
library(lmtest)
bptest(reducedmodel)
# Plot Scale-Location (Residuals vs. Square Root of Fitted Values)
plot(reducedmodel, which = 3)
# Check Normality of Residuals
# Q-Q plot
qqnorm(residuals(reducedmodel))
qqline(residuals(reducedmodel), col = "red")
# Shapiro-Wilk test for normality
shapiro.test(residuals(reducedmodel))
# Check For Multicollinearity
# Variance Inflation Factor (VIF)
library(car)
install.packages("car")
vif(reducedmodel)
# Check For Multicollinearity
# Variance Inflation Factor (VIF)
library(car)
vif(reducedmodel)
